# -*- coding: utf-8 -*-
"""String matching algos

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GiijOkDiHRlt-a87T25ckVRy4nzf9321
"""

#kmp
def fail(p):
  n = len(p)
  f = [0]*n
  j = 1
  l = 0

  while j < n:
    if p[j] == p[l]:
      l += 1
      f[j] = l
      j += 1
    elif l > 0:
      l = f[l-1]
    else:
      f[j] = 0
      j +=1
  return f


def kmp(t,p):
  n = len(t)
  m = len(p)
  f = fail(p)
  i,j = 0,0

  while j < n:
    if t[i] == p[j]:
      if j == m - 1:
        return i - j
      else:
        i+=1
        j+=1
    elif j > 0:
      j = f[j-1]
    else:
      i +=1
  return -1

text = "ababdababcab"
pattern = "ababc"
result = kmp(text, pattern)
print(result)

# naive

def naive_match(s,t):
  n = len(s)
  m = len(t)

  for i in range(n-m):
    if t[0:m] == s[i:i+m]:
      print(f'pattern occurs with shift {i}')

text = "ababdababcab"
pattern = "aba"
naive_match(text,pattern)

# finite automata
def compute_transition_function(p, alphabet):
    m = len(p)
    transition = {}

    for q in range(m + 1):
        for a in alphabet:
            k = min(m, q + 1)
            while k > 0 and p[:k] != p[q - k + 1:q] + a:
                k -= 1
            transition[(q, a)] = k
    return transition

def finite_automaton_matcher(text, p):
    alphabet = list(set(text))
    transition = compute_transition_function(p, alphabet)
    m = len(p)
    n = len(text)
    q = 0

    for i in range(n):
        q = transition.get((q, text[i]), 0)
        if q == m:
            print(f"Pattern occurs at index {i - m + 1}")

text = "ababcababc"
pattern = "ababc"
finite_automaton_matcher(text, pattern)

# boyer-moore
def compute_last_occurence(pattern):
  last = {}
  for i in range(len(pattern)):
    last[pattern[i]] = i
  return last
def boyer_moore(t,p):
  n = len(t)
  m = len(p)
  l = compute_last_occurence(p)
  i = 0
  while i <= n-m:
    j = m-1
    while j >= 0 and p[j] == t[i+j]:
      j-=1
    if j<0:
      print(f'pattern found from {i}')
      i+=1
    else:
      i += max(1, j - l.get(t[i + j], -1))
text = "abacaabadcabacabaabb"
pattern = "abacab"
boyer_moore(text, pattern)

